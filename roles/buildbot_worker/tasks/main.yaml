---
#
# Install and update buildbot workers.
#

- name: "Buildbot worker variable checks."
  assert:
    that:
      - buildbot_project is defined
      - buildbot_master_host is defined
      - buildbot_master_port is defined
      - buildbot_worker_name is defined
      - buildbot_worker_admin is defined
      - buildbot_worker_password is defined
      - buildbot_worker_password | length > 0

- name: "Include OS specific install tasks"
  include_tasks: "{{ item }}"
  with_first_found:
    - "install/{{ ansible_distribution | replace(' ', '_') }}-{{ ansible_distribution_version }}.yaml"
    - "install/{{ ansible_distribution | replace(' ', '_') }}-{{ ansible_distribution_major_version }}.yaml"
    - "install/{{ ansible_distribution | replace(' ', '_') }}.yaml"
    - "install/{{ ansible_os_family | replace(' ', '_') }}.yaml"
    - "unknown.yaml"

- name: "Create buildbot user account"
  become: yes
  user:
    name: buildbot
    state: present
  register: buildbot_user

- name: "Create buildbot base directory"
  become: yes
  file:
    state: directory
    path: "{{ buildbot_worker_basedir }}"
    owner: "{{ buildbot_user.uid }}"
    group: "{{ buildbot_user.group }}"
    mode: "0755"

- name: "Create buildbot worker"
  become: yes
  become_method: sudo
  become_user: buildbot
  command:
    cmd: >
      buildbot-worker create-worker {{ buildbot_worker_basedir }}
      {{ buildbot_master_host }}:{{ buildbot_master_port }}
      {{ buildbot_worker_name }} {{ buildbot_worker_password }}
    creates: "{{ buildbot_worker_basedir }}/buildbot.tac"
  notify: "Restart service"

- name: "Update buildbot worker configuration"
  become: yes
  become_method: sudo
  become_user: buildbot
  lineinfile:
    path: "{{ buildbot_worker_basedir }}/buildbot.tac"
    regexp: "^{{ item.key }} ="
    line: "{{ item.key }} = {{ item.value }}"
  with_dict:
    buildmaster_host: "'{{ buildbot_master_host }}'"
    basedir: "'{{ buildbot_worker_basedir }}'"
    port: "{{ buildbot_master_port }}"
    workername: "'{{ buildbot_worker_name }}'"
    passwd: "'{{ buildbot_worker_password }}'"
  notify: "Restart service"

# Stage the buildbot info files in the ansible_user's home directory, then copy
# them to the unprivileged buildbot user's directory. This avoids the annoying
# ansible warning:
#
#    Using world-readable permissions for temporary files Ansible needs to
#    create when becoming an unprivileged user.
- name: "Create configuration staging directory"
  file:
    state: directory
    path: "{{ ansible_user_dir }}/.ansible/buildbot_worker"

- name: "Stage the worker host info"
  copy:
    content: >
      {{ ansible_distribution }}
      {{ ansible_distribution_version }}
      {{ ansible_machine }}
    dest: "{{ ansible_user_dir }}/.ansible/buildbot_worker/host"

- name: "Stage the worker admin info"
  copy:
    content: >
      {{ buildbot_worker_admin }}
    dest: "{{ ansible_user_dir }}/.ansible/buildbot_worker/admin"

- name: "Stage the worker access uri"
  copy:
    content: >
      ssh://{{ ansible_fqdn }}
    dest: "{{ ansible_user_dir }}/.ansible/buildbot_worker/access_uri"

- name: "Install buildbot worker info files"
  become: yes
  copy:
    remote_src: yes
    src: "{{ ansible_user_dir }}/.ansible/buildbot_worker/{{ item }}"
    dest: "{{ buildbot_worker_basedir }}/info/{{ item }}"
    owner: "{{ buildbot_user.uid }}"
    group: "{{ buildbot_user.group }}"
    mode: 0644
  with_items:
    - host
    - admin
    - access_uri
  notify: "Restart service"

- name: "Include OS specific service tasks"
  include_tasks: "{{ item }}"
  with_first_found:
    - "service/{{ ansible_distribution | replace(' ', '_') }}-{{ ansible_distribution_version }}.yaml"
    - "service/{{ ansible_distribution | replace(' ', '_') }}-{{ ansible_distribution_major_version }}.yaml"
    - "service/{{ ansible_distribution | replace(' ', '_') }}.yaml"
    - "service/{{ ansible_os_family | replace(' ', '_') }}.yaml"
    - "unknown.yaml"
